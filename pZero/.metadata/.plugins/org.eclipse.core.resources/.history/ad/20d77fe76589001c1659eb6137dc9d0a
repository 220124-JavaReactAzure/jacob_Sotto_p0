package com.revature.p0.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.UUID;

import com.revature.p0.models.Users;
import com.revature.p0.util.collections.LinkedList;
import com.revature.p0.util.collections.List;
import com.revature.p0.util.datasource.ConnectionFactory;

public class UserDao implements CrudDao<Users>{
	
	public Users findbyUsernameAndPassword(String username, String pass) {
	
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			String sql = "select * from user where username = ? and pass = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, username);
			ps.setString(2, pass);
			ResultSet rs = ps.executeQuery();
			
			while (rs.next()) {
				Users user = new Users();
				user.setUserId(rs.getString("user_id"));
				user.setFirstName("first_name");
				user.setLastName("last_name");
				user.setEmail("email");
				user.setUsername("username");
				user.setPass("pass");
				
				return user;
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public Users findByEmail(String email) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			String sql = "select * from user where email = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, email);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Users user = new Users();
				user.setUserId(rs.getString("user_id"));
				user.setFirstName("first_name");
				user.setLastName("last_name");
				user.setEmail("email");
				user.setUsername("username");
				user.setPass("pass");
				
				return user;
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	public Users findByUsername(String username) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			String sql = "select * from user where username = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, username);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Users user = new Users();
				user.setUserId(rs.getString("user_id"));
				user.setFirstName(rs.getString("first_name"));
				user.setLastName(rs.getString("last_name"));
				user.setEmail(rs.getString("email"));
				user.setUsername(rs.getString("username"));
				user.setPass(rs.getString("pass"));
				
				return user;
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public Users create(Users newUser) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			newUser.setUserId(UUID.randomUUID().toString());
			
			String sql = "insert into user (user_id, first_name, last_name, email, username, pass) values (?, ?, ?, ?, ?, ?)";
			
			PreparedStatement ps = conn.prepareStatement(sql);
			
			ps.setString(1, newUser.getUserId());
			ps.setString(2, newUser.getFirstName());
			ps.setString(3, newUser.getLastName());
			ps.setString(4, newUser.getEmail());
			ps.setString(5, newUser.getUsername());
			ps.setString(6, newUser.getPass());
			
			int rowsInserted = ps.executeUpdate();
			
			if(rowsInserted != 0) {
				return newUser;
			}
		
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public List<Users>findAll(){
		List<Users> userList = new LinkedList<>();
		
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			String sql = "select * from scientists";
			Statement s = conn.createStatement();
			
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				Users user = new Users();
				user.setUserId(rs.getString("user_id"));
				user.setFirstName(rs.getString("first_name"));
				user.setLastName(rs.getString("last_name"));
				user.setEmail(rs.getString("email"));
				user.setUsername(rs.getString("username"));
				user.setPass(rs.getString("pass"));
				
				userList.add(user);
			}
			return userList;
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override 
	public Users findById(String id) {
		return null;
	}
	
	@Override
	public boolean update(Users updatedObj) {
		return false;
	}
	
	@Override
	public boolean delete(String id) {
		return false;
	}
	
}
